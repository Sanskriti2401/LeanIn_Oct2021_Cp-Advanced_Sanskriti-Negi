#include <bits/stdc++.h>
using namespace std;


class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    void dfs(vector<int>&v, vector<int> adj[],int i, vector<int>&ans)
    {
        v[i]=1;
        ans.push_back(i);
        
        for(auto x: adj[i])
        {
            if(v[x]==0)
                dfs(v,adj,x,ans);
        }
        
        
    }
    vector<int> dfsOfGraph(int n, vector<int> adj[]) 
    {
        int i;
        vector<int>v(n,0);
        vector<int>ans;
        for(i=0;i<n;i++)
        {
            if(v[i]==0)
                dfs(v,adj,i,ans);
        }
        
        return ans;
        
        
        
    }
};


int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        vector<int> ans = obj.dfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
