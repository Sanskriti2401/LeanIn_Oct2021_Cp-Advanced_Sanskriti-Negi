//DFS
#include<bits/stdc++.h>
using namespace std;


class Solution {
public:

bool check(vector<int>adj[],vector<int>&color,int i)
{
    queue<int>q;
    q.push(i);
    color[i]=1;
    
    while(!q.empty())
    {
        int a=q.front();
        q.pop();
        
        for(auto x:adj[a])
        {
            if(color[x]==-1)
            {
                color[x]=1-color[a];
                q.push(x);
            }
            else
            {
                if(color[x]==color[a])
                    return false;
            }
        }
    }
    
    return true;
}
	bool isBipartite(int n, vector<int>adj[])
	{
	    vector<int>color(n,-1);
	    for(int i=0;i<n;i++)
	    {
	        if(color[i]==-1)
	        {
	            if(!check(adj,color,i))
	                return false;
	        }
	    }
	    return true;
	    
	    
	}

};


int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isBipartite(V, adj);    
		if(ans)cout << "1\n";
		else cout << "0\n";  
	}
	return 0;
} 

//BFS

#include<bits/stdc++.h>
using namespace std;


class Solution {
public:

bool check(vector<int>adj[],vector<int>color,int i)
{
    
    queue<int>q;
    q.push(i);
    color[i]=1;
    
    while(!q.empty())
    {
        int a=q.front();
        q.pop();
        
        for(auto x:adj[a])
        {
            if(color[x]==-1)
            {
                color[x]=1-color[a];
                q.push(x);
            }
            else
            {
                if(color[x]==color[a])
                    return false;
            }
        }
    }
    
    
    return true;
};
