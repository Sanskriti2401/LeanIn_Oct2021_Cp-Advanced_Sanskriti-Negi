//DFS 
class Solution 
{
    public:
    
    bool checkCycle(int i,int p,vector<int>adj[],vector<bool>&v)
    {
      
        v[i]=true;
        for(auto x:adj[i])
        {
            if(!v[x])
            {
                if(checkCycle(x,i,adj,v))
                    return true;
                
            }
            else
                if(x!=p)
                    return true;
                
            
        }
        return false;
    }
    //Function to detect cycle in an undirected graph.
	bool isCycle(int n, vector<int>adj[])
	{
	    vector<bool>v(n,false);
	    for(int i=0;i<n;i++)
	    {
	        if(!v[i])
	        {
	            bool f=checkCycle(i,-1,adj,v);
	            if(f)
	                return true;
	        }
	    }
	    return false;
	}
};

//BFS

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool cycle(vector<int> adj[],vector<int>&v,int i)
    {
         queue<pair<int,int>>q;
         q.push({i,-1});
         v[i]=1;
         
         while(!q.empty())
         {
             int a=q.front().first;
             int b=q.front().second;
             q.pop();
             
             for(auto x: adj[a])
             {
                 if(v[x]==0)
                 {
                     q.push({x,a});
                     v[x]=1;
                     
                 }
                 else
                 {
                     if(x!=b)
                        return true;
                 }
             }
         }
         
         return false;
    }
    bool isCycle(int n, vector<int> adj[]) 
    {
       
        vector<int>v(n,0);
        
        for(int i=0;i<n;i++)
        {
            if(v[i]==0)
            {
                 if(cycle(adj,v,i))
                return true;
                
            }
           
        }
        
        return false;
        
    }
};
